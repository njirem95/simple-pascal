// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scanner/scanner.go

// Package mock_scanner is a generated GoMock package.
package mock_scanner

import (
	gomock "github.com/golang/mock/gomock"
	token "github.com/njirem95/simple-pascal/pkg/scanner/token"
	reflect "reflect"
)

// MockScanner is a mock of Scanner interface
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockScanner) Next() token.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(token.Token)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockScannerMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockScanner)(nil).Next))
}

// Peek mocks base method
func (m *MockScanner) Peek() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(string)
	return ret0
}

// Peek indicates an expected call of Peek
func (mr *MockScannerMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockScanner)(nil).Peek))
}

// Advance mocks base method
func (m *MockScanner) Advance() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Advance")
}

// Advance indicates an expected call of Advance
func (mr *MockScannerMockRecorder) Advance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Advance", reflect.TypeOf((*MockScanner)(nil).Advance))
}
